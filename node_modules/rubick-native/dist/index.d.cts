export { activeWindow as getActiveWin, openWindows as getOpenWin } from '@miniben90/x-win';
import { ParsedPath } from 'path';

interface ClipboardContentText {
    type: "text";
    content: string;
}
interface ClipboardContentFile {
    type: "file";
    content: string[];
}
type ClipboardContent = ClipboardContentText | ClipboardContentFile | null;
declare const getClipboardContent: () => ClipboardContent;

declare const getFolderOpenPath: () => Promise<string>;

interface Position {
  x: number
  y: number
}

type MouseBtn = "Left" | "Middle" | "Right" | "Back" | "Forward";
interface MoveMoveInput {
    type: "relative" | "absolute";
    data: Position;
}
declare const sendKeyboardSimulation: (cmd: string) => void;
declare const mouseScrollX: (len: number) => void;
declare const mouseScrollY: (len: number) => void;
declare const mouseMove: (input: MoveMoveInput) => void;
declare const mouseLocaion: () => Position;
declare const mouseDown: (btn: MouseBtn) => void;
declare const mouseUp: (btn: MouseBtn) => void;
declare const mouseClick: (btn: MouseBtn) => void;

type EventKeyType = "Alt" | "AltGr" | "Backspace" | "CapsLock" | "ControlLeft" | "ControlRight" | "Delete" | "DownArrow" | "End" | "Escape" | "F1" | "F10" | "F11" | "F12" | "F2" | "F3" | "F4" | "F5" | "F6" | "F7" | "F8" | "F9" | "Home" | "LeftArrow" | "MetaLeft" | "MetaRight" | "PageDown" | "PageUp" | "Return" | "RightArrow" | "ShiftLeft" | "ShiftRight" | "Space" | "Tab" | "UpArrow" | "PrintScreen" | "ScrollLock" | "Pause" | "NumLock" | "BackQuote" | "Num1" | "Num2" | "Num3" | "Num4" | "Num5" | "Num6" | "Num7" | "Num8" | "Num9" | "Num0" | "Minus" | "Equal" | "KeyQ" | "KeyW" | "KeyE" | "KeyR" | "KeyT" | "KeyY" | "KeyU" | "KeyI" | "KeyO" | "KeyP" | "LeftBracket" | "RightBracket" | "KeyA" | "KeyS" | "KeyD" | "KeyF" | "KeyG" | "KeyH" | "KeyJ" | "KeyK" | "KeyL" | "SemiColon" | "Quote" | "BackSlash" | "IntlBackslash" | "KeyZ" | "KeyX" | "KeyC" | "KeyV" | "KeyB" | "KeyN" | "KeyM" | "Comma" | "Dot" | "Slash" | "Insert" | "KpReturn" | "KpMinus" | "KpPlus" | "KpMultiply" | "KpDivide" | "Kp0" | "Kp1" | "Kp2" | "Kp3" | "Kp4" | "Kp5" | "Kp6" | "Kp7" | "Kp8" | "Kp9" | "KpDelete" | "Function" | {
    Unknown: number;
};
type EventBtnType = "Left" | "Right" | "Middle" | {
    Unknown: number;
};
interface MouseKeyBoardEventOther {
    time: {
        secs_since_epoch: number;
        nanos_since_epoch: number;
    };
    name: null;
    event: {
        type: "KeyRelease" | "ButtonPress" | "ButtonRelease";
        value: EventKeyType;
    } | {
        type: "MouseMove";
        value: {
            x: number;
            y: number;
        };
    } | {
        type: "Wheel";
        value: {
            delta_x: number;
            delta_y: number;
        };
    };
}
interface MouseKeyBoardEventKeyPress {
    time: {
        secs_since_epoch: number;
        nanos_since_epoch: number;
    };
    name: string;
    event: {
        type: "KeyPress";
        value: EventKeyType;
    };
}
type MouseKeyBoardEvent = MouseKeyBoardEventOther | MouseKeyBoardEventKeyPress;
declare const onInputEvent: (callback: (event: MouseKeyBoardEvent) => void) => void;
declare const grabInputEvent: (callback: (event: MouseKeyBoardEvent) => boolean) => void;

type CallBack = (app: App) => void | Promise<void>;
interface App extends ParsedPath {
    name: string;
    description: string;
    execPath: string;
    shortCutPath: string;
    workingDir: string;
}
declare const getSystemApp: (callback: CallBack, extraPath?: string[]) => Promise<void>;
declare const getAppIcon: (path: string) => string;

export { type App, type CallBack, type ClipboardContent, type EventBtnType, type EventKeyType, type MouseBtn, type MouseKeyBoardEvent, type MouseKeyBoardEventKeyPress, type MouseKeyBoardEventOther, type MoveMoveInput, getAppIcon, getClipboardContent, getFolderOpenPath, getSystemApp, grabInputEvent, mouseClick, mouseDown, mouseLocaion, mouseMove, mouseScrollX, mouseScrollY, mouseUp, onInputEvent, sendKeyboardSimulation };
